@page "/"
@using SteamShip.Shared
@inject HttpClient Http

<h1>Find Steam games in common</h1>

<input @bind="fieldId" />

<button class="btn btn-primary" @onclick="@(async () => await addSteamId())">Add</button>

@if (@currentProfiles.Count < 2)
{
    <p>Please enter at least 2 steam ids to compare</p>
}
else
{
    <p>Comparing games from these @currentProfiles.Count steam profiles:</p>
}

@foreach (var curProf in currentProfiles)
{
    var id = curProf.Id;
    var name = curProf.Name;
    <p>
        @name <button class="btn" @onclick="() => removeProfile(curProf)">x</button>
    </p>
}

@if (commonGames != null)
{
    <p> You have @commonGames.Length games in common!</p>

    <table class="table">
        <thead>
            <tr>
                <th>Game Title</th>
                <th>Hours Played</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var game in commonGames)
            {
                <tr>
                    <td>@game.name</td>
                    <td>@game.hours_played</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private string fieldId;

    private List<SteamProfile> currentProfiles = new List<SteamProfile>();

    private SteamGame[] commonGames;

    private async Task addSteamId()
    {

        var profile = await Http.GetFromJsonAsync<SteamProfile>("steam?query=" + fieldId);
        currentProfiles.Add(profile);
        getGamesInCommon();
    }

    private void removeProfile(SteamProfile profile)
    {        
        //TODO Verify steam profile exists and handle errors

        currentProfiles.Remove(profile);
        getGamesInCommon();
    }

    private async Task getGamesInCommon()
    {
        if(currentProfiles.Count < 2) {
            //nothing to compare yet
            return;
        }

        var response = await Http.PostAsJsonAsync("Steam/GetGamesInCommon", currentProfiles);
        commonGames = await response.Content.ReadFromJsonAsync<SteamGame[]>();
        this.StateHasChanged();
    }
}